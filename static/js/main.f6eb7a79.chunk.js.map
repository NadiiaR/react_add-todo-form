{"version":3,"sources":["api/users.ts","services/user.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","getUserById","userId","usersFromServer","find","user","TodoInfo","_ref","onSubmit","title","setTitle","useState","hasTitleError","setHasTitleError","setUserId","hasUserIdError","setHasUserIdError","reset","_jsxs","action","method","event","preventDefault","completed","onReset","children","_jsx","className","htmlFor","type","placeholder","defaultValue","onChange","target","value","onBlur","required","map","TodoList","todos","todo","_todo$user","_todo$user2","classNames","href","initialTodos","getNewTodoId","Math","max","App","setTodos","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"0KAAe,GACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BCxDJ,SAASC,EAAYC,GAC1B,OAAOC,EAAgBC,MAAKC,GAAQA,EAAKR,KAAOK,KAC3C,K,WCKA,MAAMI,EAA4BC,IAAmB,IAAlB,SAAEC,GAAUD,EAEpD,MAAOE,EAAOC,GAAYC,mBAAS,KAC5BC,EAAeC,GAAoBF,oBAAS,IAE5CT,EAAQY,GAAaH,mBAAS,IAC9BI,EAAgBC,GAAqBL,oBAAS,GAc/CM,EAAQA,KACZP,EAAS,IACTI,EAAU,GAEVD,GAAiB,GACjBG,GAAkB,IAwBpB,OACEE,eAAA,QACEC,OAAO,aACPC,OAAO,OACPZ,SAzBkBa,IACpBA,EAAMC,iBAENT,GAAkBJ,GAClBO,GAAmBd,GAEdO,GAAUP,IAIfM,EAAS,CACPX,GAAI,EACJY,QACAP,SACAqB,WAAW,EACXlB,KAAMJ,EAAYC,KAGpBe,MAQEO,QAASP,EAAMQ,SAAA,CAGfC,cAAA,SAAOC,UAAU,QAAQC,QAAQ,aAAYH,SAAC,mBAE9CC,cAAA,SACE7B,GAAG,aACHgC,KAAK,OACL,UAAQ,aACRC,YAAY,iBACZC,aAActB,EACduB,SAxDqBX,IACzBX,EAASW,EAAMY,OAAOC,OACtBrB,GAAiB,IAuDbsB,OAAQA,KACNtB,GAAkBJ,MAIrBG,GACCc,cAAA,QAAMC,UAAU,QAAOF,SAAC,yBAG1BC,cAAA,OAAKC,UAAU,QAAOF,SACpBP,eAAA,SAAOU,QAAQ,UAASH,SAAA,CAAC,gBAGvBP,eAAA,UACE,UAAQ,aACRkB,UAAQ,EACRL,aAAc7B,EACd8B,SArEkBX,IAC1BP,GAAWO,EAAMY,OAAOC,OACxBlB,GAAkB,IAmEmBS,SAAA,CAE7BC,cAAA,UAAQQ,MAAM,IAAGT,SAAC,kBAEjBtB,EAAgBkC,KAAIhC,GACnBqB,cAAA,UAAQQ,MAAO7B,EAAKR,GAAG4B,SACpBpB,EAAKP,MADqBO,EAAKR,SAMrCkB,GACCW,cAAA,QAAMC,UAAU,QAAOF,SAAC,8BAK9BC,cAAA,UACEG,KAAK,SACL,UAAQ,eAAcJ,SACvB,Y,oBCzGA,MAAMa,EAA4B/B,IAAgB,IAAf,MAAEgC,GAAOhC,EACjD,OACEmB,cAAA,WAASC,UAAU,WAAUF,SAC1Bc,EAAMF,KAAIG,IAAI,IAAAC,EAAAC,EAAA,OACbxB,eAAA,WACE,UAASsB,EAAK3C,GACd8B,UAAWgB,IAAW,WAAY,CAChC,sBAAuBH,EAAKjB,YAC3BE,SAAA,CAEHC,cAAA,MAAIC,UAAU,kBAAiBF,SAC5Be,EAAK/B,QAGRiB,cAAA,KAAGC,UAAU,WAAWiB,KAAe,QAAXH,EAAED,EAAKnC,YAAI,IAAAoC,OAAA,EAATA,EAAWzC,MAAMyB,SACnC,QADmCiB,EAC5CF,EAAKnC,YAAI,IAAAqC,OAAA,EAATA,EAAW5C,gBCZlB+C,ECXS,CACb,CACEhD,GAAI,EACJY,MAAO,qBACPc,WAAW,EACXrB,OAAQ,GAEV,CACEL,GAAI,GACJY,MAAO,kBACPc,WAAW,EACXrB,OAAQ,GAEV,CACEL,GAAI,EACJY,MAAO,qCACPc,WAAW,EACXrB,OAAQ,IDNiCmC,KAAIG,IAAI,IAChDA,EACHnC,KAAMJ,EAAYuC,EAAKtC,YAGzB,SAAS4C,EAAaP,GAKpB,OAJcQ,KAAKC,OACdT,EAAMF,KAAIG,GAAQA,EAAK3C,MAGb,EAGV,MAAMoD,EAAgBA,KAC3B,MAAOV,EAAOW,GAAYvC,mBAAiBkC,GAW3C,OACE3B,eAAA,OAAKS,UAAU,MAAKF,SAAA,CAClBC,cAAA,MAAAD,SAAI,kBAEJC,cAACpB,EAAQ,CAACE,SAbGgC,IACf,MAAMW,EAAU,IACXX,EACH3C,GAAIiD,EAAaP,IAGnBW,GAASE,GAAgB,CAACD,KAAYC,QASpC1B,cAACY,EAAQ,CAACC,MAAOA,QEvCvBc,IAASC,OAAO5B,cAACuB,EAAG,IAAKM,SAASC,eAAe,U","file":"static/js/main.f6eb7a79.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../components/types/User';\nimport usersFromServer from '../api/users';\n\nexport function getUserById(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId)\n    || null;\n}\n","// import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Todo } from '../types/Todo';\nimport { getUserById } from '../../services/user';\nimport usersFromServer from '../../api/users';\n\ntype Props = {\n  onSubmit: (todo: Todo) => void;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ onSubmit }) => {\n  // #region state\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n  // #endregion\n  // #region handlers\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n  // #endregion\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n\n    setHasTitleError(false);\n    setHasUserIdError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setHasTitleError(!title);\n    setHasUserIdError(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    onSubmit({\n      id: 0,\n      title,\n      userId,\n      completed: false,\n      user: getUserById(userId),\n    });\n\n    reset();\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n      onReset={reset}\n    >\n\n      <label className=\"field\" htmlFor=\"todo-title\">Title:&nbsp;&nbsp;</label>\n\n      <input\n        id=\"todo-title\"\n        type=\"text\"\n        data-cy=\"titleInput\"\n        placeholder=\"Add title here\"\n        defaultValue={title}\n        onChange={handleTitleChange}\n        onBlur={() => {\n          setHasTitleError(!title);\n        }}\n      />\n\n      {hasTitleError && (\n        <span className=\"error\">Please enter a title</span>\n      )}\n\n      <div className=\"field\">\n        <label htmlFor=\"user-id\">\n          User:&nbsp;&nbsp;\n\n          <select\n            data-cy=\"userSelect\"\n            required\n            defaultValue={userId}\n            onChange={handleUserIdChange}\n          >\n            <option value=\"0\">Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {hasUserIdError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </label>\n      </div>\n\n      <button\n        type=\"submit\"\n        data-cy=\"submitButton\"\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <article\n          data-id={todo.id}\n          className={classNames('TodoInfo', {\n            'TodoInfo--completed': todo.completed,\n          })}\n        >\n          <h2 className=\"TodoInfo__title\">\n            {todo.title}\n          </h2>\n\n          <a className=\"UserInfo\" href={todo.user?.email}>\n            {todo.user?.name}\n          </a>\n        </article>\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\n\n// #region imports\nimport React, { useState } from 'react';\nimport { Todo } from './components/types/Todo';\nimport todosFromServer from './api/todos';\nimport { TodoInfo } from './components/TodoInfo';\nimport { TodoList } from './components/TodoList';\nimport { getUserById } from './services/user';\n// #endregion\n\nconst initialTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nfunction getNewTodoId(todos: Todo[]) {\n  const maxId = Math.max(\n    ...todos.map(todo => todo.id),\n  );\n\n  return maxId + 1;\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>(initialTodos);\n\n  const addTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: getNewTodoId(todos),\n    };\n\n    setTodos(currentTodos => [newTodo, ...currentTodos]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoInfo onSubmit={addTodo} />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n\nexport default App;\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}